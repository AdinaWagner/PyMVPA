#!/usr/bin/make -f
# -*- mode: makefile; coding: utf-8 -*-

srcpkg = $(shell LC_ALL=C dpkg-parsechangelog | grep '^Source:' | cut -d ' ' -f 2,2)
debver = $(shell LC_ALL=C dpkg-parsechangelog | grep '^Version:' | cut -d ' ' -f 2,2 )
upstreamver = $(shell echo $(debver) | sed -e 's/-[^-]*$$//' )

# this figures out the last merge point from 'master' into the 'dist' branch and
# then described this commit relative to the last release tag (upstream/...)
# If this should make any sense the local master branch must track remote
# master.
gitver = $(shell [ -x /usr/bin/git ] && git describe --tags --match 'upstream/*' $$(git merge-base -a HEAD master) | sed -e 's,^upstream/,,' -e 's/\.dev/~dev/' -e 's/\.rc/~rc/')

export HOME=$(CURDIR)/build

# one ring to rule them all ...
%:
# need to enforce distutils, since we also have a makefile
	dh $@ --with=python2 --buildsystem=python_distutils --builddirectory=build

override_dh_auto_configure:
	dh_auto_configure
	mkdir -p $(CURDIR)/build

override_dh_auto_build:
	dh_auto_build -- --with-libsvm
	$(MAKE) manpages
ifeq (,$(filter nodoc,$(DEB_BUILD_OPTIONS)))
	$(MAKE) htmldoc
	-rm build/html/_static/jquery.js build/html/_static/underscore.js
	$(MAKE) notebooks
endif


# we run the test suite on the install
override_dh_auto_test:
	: # Tests will be ran later on against installed version

override_dh_auto_install:
	dh_auto_install -- --with-libsvm
	# run unit tests here to actually check the deployed package
	# whenever we don't have to build for python 2.5 anymore call
	# python with -B and remove the find for pyc files
ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
	for buildver in $(shell pyversions -vr); do \
		echo "I: Running PyMVPA unittests using python$$buildver"; \
		cd $(CURDIR)/debian/tmp/usr/lib/python$$buildver/*-packages && \
		PYTHONPATH=. MVPA_TESTS_LABILE=no MVPA_TESTS_LOWMEM=yes \
		MVPA_TESTS_QUICK=yes MVPA_TESTS_VERBOSITY=3 \
		python$$buildver mvpa2/tests/__init__.py \
		|| exit 1 ; find . -type f -name '*.pyc' -delete ; \
	done
endif
	# and now move libraries into -lib package (account for snapshot name
	# as well)
	mkdir -p $(CURDIR)/debian/python-mvpa2-lib
	cd $(CURDIR)/debian/python-mvpa2-lib && \
		for so in $$(find ../tmp -name '*.so'); do \
			install -D $$so $${so#../tmp/*} ; \
			rm $$so ; \
		done
	: # Do not install some existing scripts yet for now
	find debian -wholename '*/bin/*' -o -wholename '*/man/*' \
	| grep -e 'pymvpa2-\(analysis\)' \
	| xargs -r rm -rf

override_dh_python2:
	dh_python2
	if [ -x /usr/bin/dh_numpy ]; then dh_numpy; fi

override_dh_installchangelogs:
	dh_installchangelogs Changelog

override_dh_auto_clean:
	$(MAKE) clean
	dh_auto_clean
	-rm -rf $(CURDIR)/build

# make orig tarball from repository content
get-orig-source:
	# orig tarball, turn directory into something nicer
	git archive --format=tar --prefix=$(srcpkg)-$(gitver)/ HEAD | \
		tar --delete $(srcpkg)-$(gitver)/debian | \
		gzip -9 > $(srcpkg)_$(gitver).orig.tar.gz

# same for dev snapshots, but here it produces a dev changelog entry first
# that converts the source package name to -snapshot
dev-source: dev-changelog get-orig-source
	mv $(srcpkg)_$(gitver).orig.tar.gz ..

# helper to create a new changelog entry for a development snapshot package
# go with default changelog item for each new snapshot, but fire up editor
# if there already was a changelog for this upstream version, as there is
# probably something to say about this new Debian snapshot package release
dev-changelog:
	@if [ "$(gitver)" = "$(upstreamver)" ]; then \
		dch -i --package pymvpa-snapshot ; \
	else \
		dch --newversion $(gitver)-1 --package pymvpa-snapshot \
			--allow-lower-version "PyMVPA development snapshot." ; \
	fi

## immediately useable documentation and exemplar scripts/data
override_dh_compress:
	dh_compress -X.py -X.html -X.pdf -X.css -X.jpg -X.txt -X.js -X.json -X.rtc -Xobjects.inv -X.ipynb -X.sh
