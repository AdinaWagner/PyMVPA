From: Yaroslav Halchenko <debian@onerussian.com>
Subject: ENH(DOC): cache intersphinx mappings
  Needed to facilitate building Debian package with intersphinx mappings but
without accessing network

--- a/doc/Makefile
+++ b/doc/Makefile
@@ -31,14 +31,14 @@ help:
 	@echo "  doctest   to run all doctests embedded in the documentation (if enabled)"
 
 clean:
-	-rm -rf $(BUILDDIR) source/generated
+	-rm -rf $(BUILDDIR) source/generated source/intersphinx
 	-rm generate-stamp
 
 SPHINXEXT_PATH=$(shell python -c 'import sphinx.ext; from distutils.version import LooseVersion; print LooseVersion(sphinx.__version__) < "1.1.2" and "sphinxext" or sphinx.ext.__path__[0]')
 #SPHINXEXT_PATH=sphinxext
 
 generate: generate-stamp
-generate-stamp:
+generate-stamp: cache_intersphinx
 	mkdir -p $(BUILDDIR)
 	@MVPA_EXTERNALS_RAISE_EXCEPTION=off \
 		PYTHONPATH=$(CURDIR)/sphinxext:$(CURDIR)/..:$(PYTHONPATH) \
@@ -57,6 +57,12 @@ generate-stamp:
 	done
 	@touch $@
 
+cache_intersphinx: cache_intersphinx-stamp
+cache_intersphinx-stamp:
+	# fetch intersphinx objects for explicit intersphinxing
+	python source/conf.py cache_intersphinx
+	@touch $@
+
 html: generate
 	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
 	@echo
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -304,3 +304,42 @@ intersphinx_mapping = {'http://docs.pyth
                        'http://docs.scipy.org/doc/numpy/': None,
                        'http://matplotlib.sourceforge.net/': None,
                        }
+# check if we have a local copy
+intersphinx_dir = os.path.join(os.path.dirname(__file__), 'intersphinx')
+def get_intersphinx_file(url):
+    site = url.split('/')[2]
+    return os.path.join(intersphinx_dir, site + '_objects.inv')
+
+def test_get_intersphinx_file():
+    assert(get_intersphinx_file('http://docs.python.org/').endswith('docs.python.org_objects.inv'))
+
+def update_intersphinx_mapping(mapping):
+    """Updates mapping to use local files if available
+    """
+    for url in mapping:
+        f = get_intersphinx_file(url)
+        if os.path.exists(f):
+            intersphinx_mapping[url] = f
+
+def fetch_intersphinx_objects(mapping):
+    import urllib
+    if not os.path.exists(intersphinx_dir):
+        os.makedirs(intersphinx_dir)
+    for url in mapping:
+        objects_url = '%s/objects.inv' % url
+        try:
+            f = get_intersphinx_file(url)
+            urllib.urlretrieve(objects_url, f)
+            print("D: fetched %s" % f)
+        except Exception, e:
+            print("D: failed to retrieve from %s: %s" % (objects_url, e))
+
+if __name__ == '__main__':
+    if len(sys.argv) > 1:
+        if sys.argv[1] == 'cache_intersphinx':
+            fetch_intersphinx_objects(intersphinx_mapping)
+
+if os.path.exists(intersphinx_dir):
+    update_intersphinx_mapping(intersphinx_mapping)
+
+print("D: interersphinx_mapping %s " % (str(intersphinx_mapping)))
